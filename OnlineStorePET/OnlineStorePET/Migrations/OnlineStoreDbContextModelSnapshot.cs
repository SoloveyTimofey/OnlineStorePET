// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStorePET.Models.Database;

#nullable disable

namespace OnlineStorePET.Migrations
{
    [DbContext(typeof(OnlineStoreDbContext))]
    partial class OnlineStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("CategorySequence");

            modelBuilder.HasSequence("ItemSequence");

            modelBuilder.Entity("StoreDataModels.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("StoreDataModels.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR [CategorySequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("StoreDataModels.Clothes.ClothingSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("Id");

                    b.ToTable("ClothingSizes");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.ClothingSizeJunction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClothingId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClothingSizeId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClothingId");

                    b.HasIndex("ClothingSizeId");

                    b.ToTable("ClothingSizeJunctions");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.Fit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fits");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.SleeveLenght", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Lenght")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SleeveLenghts");
                });

            modelBuilder.Entity("StoreDataModels.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("HEX")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("StoreDataModels.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("StoreDataModels.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImageBytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("StoreDataModels.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR [ItemSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ImageId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("StoreDataModels.Shoes.ShoeSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Size")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("ShoeSizes");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.ShoeSizeJunction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("ShoeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShoeSizeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShoeId");

                    b.HasIndex("ShoeSizeId");

                    b.ToTable("ShoeSizeJunctions");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.ClothingCategory", b =>
                {
                    b.HasBaseType("StoreDataModels.Category");

                    b.ToTable("ClothingCategories");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.ShoeCategory", b =>
                {
                    b.HasBaseType("StoreDataModels.Category");

                    b.ToTable("ShoeCategories");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.Clothing", b =>
                {
                    b.HasBaseType("StoreDataModels.Item");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("FitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SleeveLenghtId")
                        .HasColumnType("bigint");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FitId");

                    b.HasIndex("SleeveLenghtId");

                    b.ToTable("Clothes");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.Shoe", b =>
                {
                    b.HasBaseType("StoreDataModels.Item");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("StoreDataModels.Brand", b =>
                {
                    b.HasOne("StoreDataModels.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.ClothingSizeJunction", b =>
                {
                    b.HasOne("StoreDataModels.Clothes.Clothing", "Clothing")
                        .WithMany("ClothingSizeJunctions")
                        .HasForeignKey("ClothingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Clothes.ClothingSize", "ClothingSize")
                        .WithMany()
                        .HasForeignKey("ClothingSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clothing");

                    b.Navigation("ClothingSize");
                });

            modelBuilder.Entity("StoreDataModels.Item", b =>
                {
                    b.HasOne("StoreDataModels.Color", "Color")
                        .WithMany("Items")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Image", "Image")
                        .WithMany("Items")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.ShoeSizeJunction", b =>
                {
                    b.HasOne("StoreDataModels.Shoes.Shoe", "Shoe")
                        .WithMany("ShoeSizeJunctions")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Shoes.ShoeSize", "ShoeSize")
                        .WithMany("ShoeSizeJunctions")
                        .HasForeignKey("ShoeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoe");

                    b.Navigation("ShoeSize");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.Clothing", b =>
                {
                    b.HasOne("StoreDataModels.Brand", "Brand")
                        .WithMany("Clothes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Clothes.ClothingCategory", "Category")
                        .WithMany("Clothes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Clothes.Fit", "Fit")
                        .WithMany("Clothes")
                        .HasForeignKey("FitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Clothes.SleeveLenght", "SleeveLenght")
                        .WithMany("Clothes")
                        .HasForeignKey("SleeveLenghtId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Fit");

                    b.Navigation("SleeveLenght");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.Shoe", b =>
                {
                    b.HasOne("StoreDataModels.Brand", "Brand")
                        .WithMany("Shoes")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDataModels.Shoes.ShoeCategory", "Category")
                        .WithMany("Shoes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("StoreDataModels.Brand", b =>
                {
                    b.Navigation("Clothes");

                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.Fit", b =>
                {
                    b.Navigation("Clothes");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.SleeveLenght", b =>
                {
                    b.Navigation("Clothes");
                });

            modelBuilder.Entity("StoreDataModels.Color", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StoreDataModels.Country", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("StoreDataModels.Image", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.ShoeSize", b =>
                {
                    b.Navigation("ShoeSizeJunctions");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.ClothingCategory", b =>
                {
                    b.Navigation("Clothes");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.ShoeCategory", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("StoreDataModels.Clothes.Clothing", b =>
                {
                    b.Navigation("ClothingSizeJunctions");
                });

            modelBuilder.Entity("StoreDataModels.Shoes.Shoe", b =>
                {
                    b.Navigation("ShoeSizeJunctions");
                });
#pragma warning restore 612, 618
        }
    }
}
